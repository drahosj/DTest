##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.14.1] date: [Fri Sep 03 19:42:15 CDT 2021] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = DTest


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

######################################
# source
######################################
# C sources
C_SOURCES =  \
Core/Src/sysmem.c \
Core/Src/stm32f4xx_it.c \
Core/Src/stm32f4xx_hal_msp.c \
Core/Src/main.c \
Core/Src/gpio.c \
Core/Src/usart.c \
Core/Src/can.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_usart.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_gpio.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_dma.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ramfunc.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr_ex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_cortex.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_rcc.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_utils.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_ll_exti.c \
Core/Src/system_stm32f4xx.c \
Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_can.c

# ASM sources
ASM_SOURCES =  \
startup_stm32f446xx.s

# D sources
D_SOURCES = 			\
source/rt/syscalls.d 	\
source/rt/stdc.d 		\
source/rt/alloc.d 		\
source/rt/refcount.d 	\
source/add.d 			\
source/main.d			\
source/can.d			\

#source/rt/sysmem.d 	\

PACKAGE_ROOT=source

#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S


#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DUSE_FULL_LL_DRIVER \
-DUSE_HAL_DRIVER \
-DSTM32F446xx


# AS includes
AS_INCLUDES = 

# C includes
C_INCLUDES =  \
-ICore/Inc \
-IDrivers/STM32F4xx_HAL_Driver/Inc \
-IDrivers/STM32F4xx_HAL_Driver/Inc/Legacy \
-IDrivers/CMSIS/Device/ST/STM32F4xx/Include \
-IDrivers/CMSIS/Include

# Warning flags
WFLAGS=-Werror -Wall -Wextra -pedantic -Wno-unused-parameter

# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections -Werror

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -fdata-sections -ffunction-sections $(WFLAGS)

# Dstep stuff
DSTEP=dstep
SED=sed
AWK=awk
MKDIR=mkdir
PATCH=patch
ECHO=echo
FIND=find

DSTEP_DIR=dstep
GLOBAL_MODULE=Core.Inc.hal

GLOBAL_MODULE_FILE=$(DSTEP_DIR)/$(subst .,/,$(GLOBAL_MODULE)).d

DSTEP_MODULES= \
    Drivers.STM32F4xx_HAL_Driver.Inc.stm32f4xx_hal_def  	\
    Drivers.STM32F4xx_HAL_Driver.Inc.stm32f4xx_hal      	\
    Drivers.STM32F4xx_HAL_Driver.Inc.stm32f4xx_hal_can  	\
    Drivers.STM32F4xx_HAL_Driver.Inc.stm32f4xx_hal_gpio 	\
    Drivers.STM32F4xx_HAL_Driver.Inc.stm32f4xx_ll_usart 	\
    Drivers.CMSIS.Device.ST.STM32F4xx.Include.stm32f4xx  	\
    Drivers.CMSIS.Device.ST.STM32F4xx.Include.stm32f4xx  	\
    Drivers.CMSIS.Device.ST.STM32F4xx.Include.stm32f4xx  	\
    Drivers.CMSIS.Device.ST.STM32F4xx.Include.stm32f446xx	\
    Core.Inc.main                	\
    Core.Inc.stm32_assert        	\
    Core.Inc.stm32f4xx_it        	\
    Core.Inc.gpio                	\
    Core.Inc.usart               	\
    Core.Inc.can                 	\

#	$(subst /,.,$(basename $(shell $(FIND) Drivers -name '*.h')))	\
#	$(subst /,.,$(basename $(shell $(FIND) Core/Inc -name '*.h')))	\

DSTEP_FILES=$(addsuffix .d,$(subst .,/,$(DSTEP_MODULES)))

DSTEP_OUTPUTS=$(addprefix $(DSTEP_DIR)/, $(DSTEP_FILES))

D_SOURCES+=$(DSTEP_OUTPUTS)

vpath %.h $(sort $(dir $(DSTEP_FILES:.d=.h)))
vpath %.d $(sort $(dir $(DSTEP_OUTPUTS)))

# Convert inline functions to a linkable implementation
INLINE_IMPL_HEADERS=Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_usart.h \

INLINE_IMPL_DIR=$(DSTEP_DIR)/_inline_impl
C_SOURCES+=$(addprefix $(INLINE_IMPL_DIR)/, $(INLINE_IMPL_HEADERS:.h=.c))

PATCHSTAMP=Drivers/_patched
PATCHFILE=fix-generated.patch
PATCHED_FILES=Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h 	\
			  Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h 	\


# D Compiler
MODFLAGS=-I$(DSTEP_DIR) -I$(PACKAGE_ROOT)
LDC= ldc2
LDC_MCU=-mcpu=cortex-m4 -float-abi=hard
LDCFLAGS=-mtriple=$(PREFIX:-=) -gcc=$(CC) $(LDC_MCU) $(MODFLAGS) -betterC -g -w

# D Runtime
#DRUNTIME_LIBDIR=-L$(HOME)/druntime/generated/
#DRUNTIME_LIB=-ldruntime

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.dep)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32F446RETx_FLASH.ld

# libraries
LIBS = -lc -lm $(DRUNTIME_LIB) #-lnosys
LIBDIR+= $(DRUNTIME_LIBDIR)
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(C_SOURCES:.c=.o))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(ASM_SOURCES:.s=.o))
vpath %.s $(sort $(dir $(ASM_SOURCES)))
OBJECTS += $(addprefix $(BUILD_DIR)/, $(D_SOURCES:.d=_d.o))
vpath %.d $(sort $(dir $(D_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(MKDIR) -p $(@D)
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(MKDIR) -p $(@D)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/%_d.o: %.d Makefile $(GLOBAL_MODULE_FILE)| $(BUILD_DIR)
	$(MKDIR) -p $(@D)
	$(LDC) -c $(LDCFLAGS) -of $@ $<

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	$(MKDIR) -p $@		

$(GLOBAL_MODULE_FILE): Makefile $(DSTEP_OUTPUTS)
	$(ECHO) $(DSTEP_MODULES) | $(SED) 's/\s/\n/g' | $(AWK) '{print "public import "$$0";"}' > $@

$(DSTEP_DIR)/%.d: %.h Makefile $(PATCHSTAMP) | $(DSTEP_DIR)
	$(DSTEP) $(C_INCLUDES) -DSTM32F446xx $< -o $@
	$(SED) -i '1s/^/import $(GLOBAL_MODULE);/' $@
	$(SED) -i '1s/^/module $(subst /,.,$(subst .d,,$@));\n/' $@
	$(SED) -i '1s/ [^.]*./ /' $@

$(PATCHSTAMP): $(PATCHED_FILES)
	$(PATCH) -p1 < $(PATCHFILE)
	$(ECHO) $(PATCHFILE) > $(PATCHSTAMP)

.PRECIOUS: $(INLINE_IMPL_DIR)/%.c
$(INLINE_IMPL_DIR)/%.c: %.h Makefile | $(INLINE_IMPL_DIR)
	$(MKDIR) -p $(@D)
	$(SED) 's/^__STATIC_INLINE//' < $< >> $@
	$(SED) -i '1s/^/$(addsuffix __END_INLINE_IMPL_INCLUDE__,$(addprefix __BEGIN_INLINE_IMPL_INCLUDE__,$(INLINE_IMPL_INCLUDES)))/' $@
	$(SED) -i '1s/__BEGIN_INLINE_IMPL_INCLUDE__/#include "/g' $@
	$(SED) -i '1s/__END_INLINE_IMPL_INCLUDE__/"\n/g' $@
	
$(INLINE_IMPL_DIR): | $(DSTEP_DIR)
	$(MKDIR) $@
	
$(DSTEP_DIR):
	$(MKDIR) $@
	


#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR) $(DSTEP_FILES)
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.dep)

# *** EOF ***
